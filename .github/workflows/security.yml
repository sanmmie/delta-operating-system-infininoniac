name: üõ°Ô∏è DeltaOS Security & Threat Intelligence

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  schedule:
    - cron: '0 2 * * *'
    - cron: '0 */6 * * *'

permissions:
  contents: write
  security-events: write
  issues: write
  pull-requests: write

jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
      # 1Ô∏è‚É£ Checkout & setup
      - uses: actions/checkout@v4

      - uses: dart-lang/setup-dart@v1
        with: sdk: stable
      - run: dart pub get

      # 2Ô∏è‚É£ Dart Linter & Audit
      - name: Dart Linter
        run: dart analyze --fatal-infos > lint.log || true
      - name: Dart Dependency Audit
        run: dart pub outdated --mode=null-safety > outdated.log && dart pub audit > audit.log || true

      # 3Ô∏è‚É£ CodeQL Analysis
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with: output: results/codeql-results.sarif

      # 4Ô∏è‚É£ Parse CodeQL Results
      - name: Parse CodeQL Results
        id: codeql_parse
        run: |
          mkdir -p results
          CRITICAL=$(jq '[.runs[].results[] | select(.level=="error")] | length' results/codeql-results.sarif || echo 0)
          HIGH=$(jq '[.runs[].results[] | select(.level=="warning")] | length' results/codeql-results.sarif || echo 0)
          MEDIUM=$(jq '[.runs[].results[] | select(.level=="note")] | length' results/codeql-results.sarif || echo 0)
          echo "CRITICAL=$CRITICAL" >> $GITHUB_ENV
          echo "HIGH=$HIGH" >> $GITHUB_ENV
          echo "MEDIUM=$MEDIUM" >> $GITHUB_ENV

      # 5Ô∏è‚É£ ML Risk Classification
      - name: ML Risk Classifier
        run: |
          pip install pandas scikit-learn
          python3 - <<'PYCODE'
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
try: df = pd.read_csv("deltaos_dependency_history.csv")
except: df = pd.DataFrame(columns=["package","vulnerabilities","updates","last_updated_days","risk"])
df_run = [{"package": l.split()[0], "vulnerabilities":1,"updates":1,"last_updated_days":0,"risk":"unknown"} for l in open("outdated.log") if "!=" in l]
df = pd.concat([df, pd.DataFrame(df_run)], ignore_index=True)
if len(df) > 10:
    le = LabelEncoder()
    df["risk_label"] = le.fit_transform(df["risk"].fillna("low"))
    X = df[["vulnerabilities","updates","last_updated_days"]]
    y = df["risk_label"]
    model = RandomForestClassifier(n_estimators=20)
    model.fit(X, y)
    preds = model.predict(X.tail(len(df_run)))
    df.loc[df.index[-len(df_run):], "risk"] = le.inverse_transform(preds)
for pkg,r in zip(df.tail(len(df_run))["package"], df.tail(len(df_run))["risk"]): print(f"{pkg}: {r}")
df.to_csv("deltaos_dependency_history.csv", index=False)
PYCODE

      # 6Ô∏è‚É£ Auto-Remediate Vulnerable Dependencies
      - name: Auto-Remediate Vulnerable Dependencies
        run: |
          VULN_COUNT=$(grep -c '!=' outdated.log || echo '0')
          if [ "$VULN_COUNT" -gt 0 ]; then
            dart pub upgrade
            git config user.name "DeltaOS Security Bot"
            git config user.email "security@deltaos.ai"
            BRANCH="security/fix-$(date +%s)"
            git checkout -b $BRANCH
            git add pubspec.* || true
            git commit -m "üîí Automated Security Patch"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} $BRANCH
            gh pr create --title "üîí Automated Security Patch" --body "This PR upgrades vulnerable dependencies detected by DeltaOS Security Guardian." --base main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # 7Ô∏è‚É£ Upload Combined Artifact
      - name: Upload Combined Security Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deltaos-security-combined
          path: |
            lint.log
            audit.log
            outdated.log
            risk_report.log
            results/codeql-results.sarif
          retention-days: 14

      # 8Ô∏è‚É£ Auto-Close Security Issues
      - name: Auto-Close Security Issues
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          MERGED_PRS=$(gh pr list --state merged --base main --json number,body -q '.[] | "\(.number):\(.body)"')
          for pr in $MERGED_PRS; do
            ISSUE_NUMS=$(echo "$pr" | grep -oE '#[0-9]+' | tr -d '#')
            for issue in $ISSUE_NUMS; do
              LABELS=$(gh issue view $issue --json labels -q '.labels[].name')
              if echo "$LABELS" | grep -q 'security'; then
                gh issue close $issue --comment "Closed: related security PR merged."
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9Ô∏è‚É£ Slack Notification
      - name: Send Security Summary to Slack
        if: always()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": ":robot_face: *DeltaOS Security Summary*",
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "fields": [
                  { "title": "Repo", "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>", "short": true },
                  { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                  { "title": "Status", "value": "${{ job.status }}", "short": true },
                  { "title": "Dart Linter", "value": "$(grep -c '‚úì' lint.log || echo '0')", "short": true },
                  { "title": "Dart Audit Warnings", "value": "$(grep -c '‚ö†Ô∏è' audit.log || echo '0')", "short": true },
                  { "title": "Critical Failures", "value": "$(grep -c '‚úó' audit.log || echo '0')", "short": true },
                  { "title": "ML Risk Scores", "value": "$(tail -n 5 risk_report.log | tr '\n' ', ' || echo 'No data')", "short": false },
                  { "title": "CodeQL Alerts", "value": "Critical: $CRITICAL, High: $HIGH, Medium: $MEDIUM", "short": false },
                  { "title": "Security Patch PR", "value": "<https://github.com/${{ github.repository }}/pulls?q=is%3Apr+is%3Aopen+security/fix|View PRs>", "short": true },
                  { "title": "Security Issues", "value": "<https://github.com/${{ github.repository }}/issues?q=is%3Aissue+label%3Asecurity|View Issues>", "short": true },
                  { "title": "Artifact", "value": "<https://github.com/${{ github.repository }}/actions/artifacts|Download Logs & Report>", "short": false },
                  { "title": "Timestamp", "value": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")", "short": true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
