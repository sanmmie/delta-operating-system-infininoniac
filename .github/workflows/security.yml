name: 🔐 DeltaOS Security Guardian

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  schedule:
    - cron: '0 2 * * *' # Daily scan at 2 AM UTC

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  security_scan:
    name: Security Scan & Auto-Advisory
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install Dependencies
        run: dart pub get

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Dependency Vulnerability Scan
        id: audit
        run: |
          dart pub outdated --mode=null-safety
          dart pub audit > audit.log || true

      - name: Security Linter
        id: lint
        run: |
          dart analyze --fatal-infos > lint.log || true

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: deltaos-security-report
          path: |
            audit.log
            lint.log
          retention-days: 5

      - name: Create GitHub Security Advisory (if critical issues found)
        if: failure() || contains(steps.audit.outputs, 'vulnerability')
        run: |
          echo "🚨 Creating GitHub Security Advisory..."
          gh api repos/${{ github.repository }}/security-advisories \
            -f summary="Critical vulnerabilities detected in DeltaOS" \
            -f description="Review audit.log for details." \
            -f severity="high" \
            -f withdrawn="false"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Issue for Security Alerts
        if: failure()
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "🚨 DeltaOS Security Alert: Vulnerability Detected"
          content-filepath: audit.log
          labels: security, critical, automation

      - name: Notify Slack (on Success)
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "✅ DeltaOS Security Scan Passed!",
              "attachments": [
                {
                  "color": "#36a64f",
                  "fields": [
                    { "title": "Repository", "value": "${{ github.repository }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (on Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "🚨 DeltaOS Security Scan Failed!",
              "attachments": [
                {
                  "color": "#ff0000",
                  "fields": [
                    { "title": "Repository", "value": "${{ github.repository }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                    { "title": "Advisory", "value": "GitHub Security Advisory created if vulnerabilities found." }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
