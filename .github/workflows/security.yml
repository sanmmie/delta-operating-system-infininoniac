name: üõ°Ô∏è DeltaOS Security & Threat Intelligence

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  schedule:
    - cron: '0 2 * * *' # daily scan
    - cron: '0 */6 * * *' # threat feed sync every 6 hours

permissions:
  contents: write
  security-events: write
  issues: write
  pull-requests: write

jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
      # 1Ô∏è‚É£ Checkout & setup
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install Dependencies
        run: dart pub get

      # 2Ô∏è‚É£ Run Static Analysis & Audit
      - name: Dart Linter
        run: dart analyze --fatal-infos > lint.log || true

      - name: Dart Dependency Audit
        run: dart pub outdated --mode=null-safety > outdated.log && dart pub audit > audit.log || true

      # 3Ô∏è‚É£ CodeQL
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # 4Ô∏è‚É£ ML Risk Classification
      - name: ML Risk Classifier
        id: risk_classifier
        run: |
          pip install pandas scikit-learn > /dev/null 2>&1
          cat > risk_model.py <<'PYCODE'
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier

try:
    df = pd.read_csv("deltaos_dependency_history.csv")
except FileNotFoundError:
    df = pd.DataFrame(columns=["package","vulnerabilities","updates","last_updated_days","risk"])

df_run = []
with open("outdated.log") as f:
    for line in f:
        if "!=" in line:
            parts = line.split()
            if len(parts) >= 2:
                df_run.append({"package": parts[0], "vulnerabilities": 1, "updates": 1, "last_updated_days": 0, "risk": "unknown"})
df = pd.concat([df, pd.DataFrame(df_run)], ignore_index=True)

if len(df) > 10:
    le = LabelEncoder()
    df["risk_label"] = le.fit_transform(df["risk"].fillna("low"))
    X = df[["vulnerabilities","updates","last_updated_days"]]
    y = df["risk_label"]
    model = RandomForestClassifier(n_estimators=20)
    model.fit(X, y)
    preds = model.predict(X.tail(len(df_run)))
    risks = le.inverse_transform(preds)
    df.loc[df.index[-len(df_run):], "risk"] = risks
    print("Predicted risk levels:")
    for pkg, r in zip(df.tail(len(df_run))["package"], risks):
        print(f"{pkg}: {r}")
else:
    print("Not enough data for ML training, using heuristic baseline.")
    for pkg in df.tail(len(df_run))["package"]:
        print(f"{pkg}: medium")

df.to_csv("deltaos_dependency_history.csv", index=False)
PYCODE
          python3 risk_model.py > risk_report.log || true

      # 5Ô∏è‚É£ Auto-remediation PR
      - name: Auto-Remediate Vulnerable Dependencies
        id: auto_patch
        run: |
          VULN_COUNT=$(grep -c '!=' outdated.log || echo '0')
          if [ "$VULN_COUNT" -gt 0 ]; then
            dart pub upgrade
            git config user.name "DeltaOS Security Bot"
            git config user.email "security@deltaos.ai"
            BRANCH="security/fix-$(date +%s)"
            git checkout -b $BRANCH
            git add pubspec.* || true
            git commit -m "üîí Automated Dependency Security Patch"
            git push origin $BRANCH
            gh pr create --title "üîí Automated Security Patch" \
              --body "This PR auto-upgrades vulnerable dependencies detected by DeltaOS Security Guardian." \
              --base main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # 6Ô∏è‚É£ Upload combined artifact
      - name: Upload Combined Security Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deltaos-security-combined
          path: |
            lint.log
            audit.log
            outdated.log
            risk_report.log
          retention-days: 14

      # 7Ô∏è‚É£ Slack Notification with links
      - name: Send Unified Security Summary to Slack
        if: always()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": ":robot_face: *DeltaOS Security & Threat Intelligence Summary*",
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    { "title": "Repository", "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                    { "title": "Status", "value": "${{ job.status }}", "short": true },
                    { "title": "Dart Linter Passed", "value": "$(grep -c '‚úì' lint.log || echo '0')", "short": true },
                    { "title": "Dart Audit Warnings", "value": "$(grep -c '‚ö†Ô∏è' audit.log || echo '0')", "short": true },
                    { "title": "Critical Failures", "value": "$(grep -c '‚úó' audit.log || echo '0')", "short": true },
                    { "title": "ML Risk Scores", "value": "$(tail -n 5 risk_report.log | tr '\n' ', ' || echo 'No data')", "short": false },
                    { "title": "Security Patch PR", "value": "<https://github.com/${{ github.repository }}/pulls?q=is%3Apr+is%3Aopen+security/fix|View PRs>", "short": true },
                    { "title": "Security Issues", "value": "<https://github.com/${{ github.repository }}/issues?q=is%3Aissue+label%3Asecurity|View Issues>", "short": true },
                    { "title": "Combined Artifact", "value": "<https://github.com/${{ github.repository }}/actions/artifacts|Download Logs & Risk Report>", "short": false },
                    { "title": "Timestamp", "value": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")", "short": true }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
